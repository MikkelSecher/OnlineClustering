<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="Partitioning.h" line="17" id="noExplicitConstructor" severity="style" msg="Class &apos;Partitioning&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="Partitioning.h" line="18" id="noExplicitConstructor" severity="style" msg="Class &apos;Partitioning&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="OCTester.cpp" line="640" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="OCTester.cpp" line="669" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="OCTester.cpp" line="697" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="403" id="variableScope" severity="style" msg="The scope of the variable &apos;ambOffset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Partitioning.cpp" line="526" id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: filename" />
    <error file="Partitioning.cpp" line="16" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::optimalClusters&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="16" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::nNumberOfOverlaps&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="16" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::lastPoint&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="16" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::difference&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="22" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::optimalClusters&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="22" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::nNumberOfOverlaps&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="22" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::difference&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="47" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::optimalClusters&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="47" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::nNumberOfOverlaps&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="47" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::lastPoint&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="47" id="uninitMemberVar" severity="style" msg="Member variable &apos;Partitioning::difference&apos; is not initialized in the constructor." />
    <error file="Partitioning.cpp" line="151" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="281" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="499" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="510" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="534" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="570" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="576" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="597" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="635" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Partitioning.cpp" line="667" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1028" id="variableScope" severity="style" msg="The scope of the variable &apos;nodesAdded&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Tree.cpp" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;Tree::workingNode&apos; is not initialized in the constructor." />
    <error file="Tree.cpp" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;Tree::nCurrentLevel&apos; is not initialized in the constructor." />
    <error file="Tree.cpp" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;Tree::numberOfMiniQueues&apos; is not initialized in the constructor." />
    <error file="Tree.cpp" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;Tree::proofTime&apos; is not initialized in the constructor." />
    <error file="Tree.cpp" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;Tree::dfTime&apos; is not initialized in the constructor." />
    <error file="Tree.cpp" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;Tree::parallelMiniQueues&apos; is not initialized in the constructor." />
    <error file="Tree.cpp" line="1208" id="passedByValue" severity="style" msg="Parameter &apos;first&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="Tree.cpp" line="1208" id="passedByValue" severity="style" msg="Parameter &apos;second&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="Tree.cpp" line="1245" id="unusedScopedObject" severity="error" msg="Instance of &apos;Tree&apos; object is destroyed immediately." />
    <error file="Tree.cpp" line="681" id="stlSize" severity="style" msg="Checking for &apos;children&apos; emptiness might be inefficient. Using children.empty() instead of children.size() can be faster. children.size() can take linear time but children.empty() is guaranteed to take constant time." />
    <error file="Tree.cpp" line="46" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="52" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="58" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="96" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="134" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="140" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="147" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="251" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="293" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="363" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="364" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="387" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="390" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="657" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="688" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="919" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="957" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1018" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1030" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1060" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1105" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1112" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1113" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1148" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1163" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1168" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1187" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1188" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1197" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1198" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1225" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1241" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1262" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Tree.cpp" line="1264" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="TreeNode.cpp" line="13" id="uninitMemberVar" severity="style" msg="Member variable &apos;TreeNode::workingSequence&apos; is not initialized in the constructor." />
    <error file="TreeNode.cpp" line="53" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="main.cpp" line="91" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="TreeNode.cpp" line="51" id="unusedFunction" severity="style" msg="The function &apos;doesChildExist&apos; is never used." />
    <error file="OCTester.cpp" line="1279" id="unusedFunction" severity="style" msg="The function &apos;getDefaultStartTree&apos; is never used." />
    <error file="OCTester.cpp" line="1293" id="unusedFunction" severity="style" msg="The function &apos;getNewLowerBoundTree&apos; is never used." />
    <error file="Partitioning.cpp" line="616" id="unusedFunction" severity="style" msg="The function &apos;listClustersFile&apos; is never used." />
    <error file="Partitioning.cpp" line="604" id="unusedFunction" severity="style" msg="The function &apos;listClustersToFile&apos; is never used." />
    <error file="Partitioning.cpp" line="588" id="unusedFunction" severity="style" msg="The function &apos;listPointsToFile&apos; is never used." />
    <error file="Tree.cpp" line="337" id="unusedFunction" severity="style" msg="The function &apos;node_pointscompare&apos; is never used." />
    <error file="OCTester.cpp" line="767" id="unusedFunction" severity="style" msg="The function &apos;oneNodeHardDFSuccessTest&apos; is never used." />
    <error file="OCTester.cpp" line="779" id="unusedFunction" severity="style" msg="The function &apos;oneNodeHarderDFSuccessTest&apos; is never used." />
    <error file="OCTester.cpp" line="792" id="unusedFunction" severity="style" msg="The function &apos;oneNodeHardestDFSuccessTest&apos; is never used." />
    <error file="OCTester.cpp" line="804" id="unusedFunction" severity="style" msg="The function &apos;oneNodeUnknownDFTest&apos; is never used." />
    <error file="TreeNode.cpp" line="39" id="unusedFunction" severity="style" msg="The function &apos;setParent&apos; is never used." />
    <error file="Tree.cpp" line="905" id="unusedFunction" severity="style" msg="The function &apos;splitNodeQueue&apos; is never used." />
    <error file="OCTester.cpp" line="821" id="unusedFunction" severity="style" msg="The function &apos;splitSequenceQueue&apos; is never used." />
    <error file="Tree.cpp" line="941" id="unusedFunction" severity="style" msg="The function &apos;splitSuccesQueue&apos; is never used." />
    <error file="OCTester.cpp" line="88" id="unusedFunction" severity="style" msg="The function &apos;startingSequence&apos; is never used." />
    <error file="OCTester.cpp" line="288" id="unusedFunction" severity="style" msg="The function &apos;unkownForceTest&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
